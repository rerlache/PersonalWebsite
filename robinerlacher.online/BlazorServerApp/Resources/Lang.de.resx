<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="HeadingAbout" xml:space="preserve">
    <value>Wer bin ich?</value>
  </data>
  <data name="HeadingCoding" xml:space="preserve">
    <value>if(mug == empty){robin.unhappy;mug.refill();}&lt;br&gt;else{robin.happy}</value>
    <comment>use @((MarkupString)HeadingCoding) to benefit of the &lt;br&gt; tag</comment>
  </data>
  <data name="HeadingDog" xml:space="preserve">
    <value>Extraordinary Elsa of Flying Porkies</value>
  </data>
  <data name="HeadingIcehockey" xml:space="preserve">
    <value>Der schnellste Mannschaftssport der Welt</value>
  </data>
  <data name="HeadingMotorcycle" xml:space="preserve">
    <value>Freiheit auf 2 Rädern</value>
  </data>
  <data name="HeadingPhotography" xml:space="preserve">
    <value>Schau dir das an...</value>
  </data>
  <data name="NavAbout" xml:space="preserve">
    <value>Über mich</value>
    <comment>Navigation Item About</comment>
  </data>
  <data name="NavCoding" xml:space="preserve">
    <value>Entwicklung</value>
    <comment>Navigation Item Coding</comment>
  </data>
  <data name="NavDog" xml:space="preserve">
    <value>Hund</value>
    <comment>Navigation Item Dog</comment>
  </data>
  <data name="NavIcehockey" xml:space="preserve">
    <value>Eishockey</value>
    <comment>Navigation Item Icehockey</comment>
  </data>
  <data name="NavMotorcycle" xml:space="preserve">
    <value>Motorrad</value>
    <comment>Navigation Item Motorcycle</comment>
  </data>
  <data name="NavPhotography" xml:space="preserve">
    <value>Fotografie</value>
    <comment>Navigation Item Photography</comment>
  </data>
  <data name="NavPrivacyImprint" xml:space="preserve">
    <value>Datenschutz &amp; Impressum</value>
  </data>
  <data name="PhotoProjectAnimal" xml:space="preserve">
    <value>Tier Fotografie</value>
  </data>
  <data name="PhotoProjectCat" xml:space="preserve">
    <value>Kategorie</value>
  </data>
  <data name="PhotoProjectLandscape" xml:space="preserve">
    <value>Landschafts Fotografie</value>
  </data>
  <data name="PhotoTitleElsa1" xml:space="preserve">
    <value>Extraordinary Elsa of Flying Porkies</value>
  </data>
  <data name="PhotoTitleElsa2" xml:space="preserve">
    <value>Elsa sucht etwas sehr, sehr spannendes ...</value>
  </data>
  <data name="PhotoTitleLandscape1" xml:space="preserve">
    <value>Testen des Lens Balls</value>
  </data>
  <data name="TitleAbout" xml:space="preserve">
    <value>Über mich</value>
    <comment>Page Title About</comment>
  </data>
  <data name="TitleCoding" xml:space="preserve">
    <value>Programmier von:</value>
    <comment>Page Title Coding</comment>
  </data>
  <data name="TitleDog" xml:space="preserve">
    <value>Hundebesitzer</value>
    <comment>Page Title Dog</comment>
  </data>
  <data name="TitleIcehockey" xml:space="preserve">
    <value>Eishockeyspieler</value>
    <comment>Page Title Icehockey</comment>
  </data>
  <data name="TitleIndex" xml:space="preserve">
    <value>Willkommen</value>
    <comment>Page Title Index</comment>
  </data>
  <data name="TitleMotorcycle" xml:space="preserve">
    <value>Motorradfahrer</value>
    <comment>Page Title Motorcycle</comment>
  </data>
  <data name="TitlePhotography" xml:space="preserve">
    <value>Fotos von: </value>
    <comment>Page Title Photography</comment>
  </data>
  <data name="TitlePrivacy" xml:space="preserve">
    <value>Datenschutzbestimmung &amp; Impressum von</value>
  </data>
  <data name="UnderConstruction" xml:space="preserve">
    <value>Inhalt noch im Aufbau...</value>
  </data>
</root>